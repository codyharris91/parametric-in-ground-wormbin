#!/usr/bin/env python3
"""
Combine OpenSCAD files into a single monolithic file.
This script processes the modular OpenSCAD project and creates a single file
with all components and parameters included.
"""

import os
import re
import sys
from pathlib import Path

# Define the project structure
PROJECT_ROOT = Path(__file__).parent.parent
OUTPUT_DIR = PROJECT_ROOT / "build"
OUTPUT_FILE = OUTPUT_DIR / "worm_bin_complete.scad"

# Ensure the output directory exists
OUTPUT_DIR.mkdir(exist_ok=True)

def read_file(file_path):
    """Read a file and return its contents as a string."""
    with open(file_path, 'r') as f:
        return f.read()

def process_file(file_path, processed_files=None):
    """
    Process a file, replacing include and use statements with the actual content.
    Returns the processed content as a string.
    """
    if processed_files is None:
        processed_files = set()
    
    # Avoid processing the same file twice
    if file_path in processed_files:
        return ""
    
    processed_files.add(file_path)
    content = read_file(file_path)
    
    # Find all include and use statements
    include_pattern = re.compile(r'include\s*<([^>]+)>')
    use_pattern = re.compile(r'use\s*<([^>]+)>')
    
    # Process include statements (replace with file content)
    for match in include_pattern.finditer(content):
        include_path = match.group(1)
        full_path = (Path(file_path).parent / include_path).resolve()
        
        # Replace the include statement with the file content
        include_content = process_file(full_path, processed_files)
        content = content.replace(match.group(0), include_content)
    
    # Process use statements (replace with file content but remove module definitions)
    for match in use_pattern.finditer(content):
        use_path = match.group(1)
        full_path = (Path(file_path).parent / use_path).resolve()
        
        # Replace the use statement with the file content
        use_content = process_file(full_path, processed_files)
        content = content.replace(match.group(0), use_content)
    
    # Remove conditional rendering blocks
    conditional_pattern = re.compile(r'if\s*\(\$filename\s*==\s*"[^"]+"\)\s*\{[^}]+\}')
    content = conditional_pattern.sub('', content)
    
    return content

def clean_content(content):
    """Clean up the content by removing duplicate empty lines and comments."""
    # Remove multiple consecutive empty lines
    content = re.sub(r'\n\s*\n\s*\n+', '\n\n', content)
    
    # Add a header
    header = """//
// In-Ground Worm Bin - Complete Model
// Generated monolithic file combining all components
//
// This file was automatically generated by combine_files.py
//

"""
    return header + content

def main():
    """Main function to combine files."""
    try:
        main_file = PROJECT_ROOT / "main.scad"
        if not main_file.exists():
            print(f"Error: Main file not found at {main_file}")
            return 1
        
        # Process the main file
        content = process_file(main_file)
        
        # Clean up the content
        content = clean_content(content)
        
        # Write the combined content to the output file
        with open(OUTPUT_FILE, 'w') as f:
            f.write(content)
        
        print(f"Successfully created monolithic file: {OUTPUT_FILE}")
        return 0
    
    except Exception as e:
        print(f"Error: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 